// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Infrastructure.Data;

#nullable disable

namespace RentACar.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221204134926_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AirCondition")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Doors")
                        .HasColumnType("int");

                    b.Property<int>("Fuel")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MakeYear")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("NavigationSystem")
                        .HasColumnType("bit");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirCondition = true,
                            ApplicationUserId = "d3211a8d-efde-4a19-8087-79cde4679276",
                            CategoryId = 3,
                            DailyRate = 40m,
                            Doors = 5,
                            Fuel = 2,
                            ImageUrl = "https://images.dealer.com/autodata/us/640/color/2022/USD20TOC041A0/209.jpg?_returnflight_id=091119126",
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Toyota",
                            MakeYear = 2022,
                            Model = "Corolla",
                            NavigationSystem = false,
                            RegNumber = "B1234AB",
                            Seats = 5,
                            Transmission = 2
                        },
                        new
                        {
                            Id = 2,
                            AirCondition = true,
                            ApplicationUserId = "d3211a8d-efde-4a19-8087-79cde4679276",
                            CategoryId = 1,
                            DailyRate = 33m,
                            Doors = 5,
                            Fuel = 1,
                            ImageUrl = "https://s7g10.scene7.com/is/image/hyundaiautoever/BC3_5DR_TopTrim_DG01-01_EXT_front_rgb_v01_w3a-1:4x3?wid=960&hei=720&fmt=png-alpha&fit=wrap,1",
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Hundai",
                            MakeYear = 2022,
                            Model = "i20",
                            NavigationSystem = false,
                            RegNumber = "B1444CB",
                            Seats = 5,
                            Transmission = 1
                        },
                        new
                        {
                            Id = 3,
                            AirCondition = true,
                            ApplicationUserId = "d3211a8d-efde-4a19-8087-79cde4679276",
                            CategoryId = 2,
                            DailyRate = 37m,
                            Doors = 5,
                            Fuel = 4,
                            ImageUrl = "https://www.citroen-eg.com/wp-content/uploads/2021/11/Polar-White-front1.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Citroen",
                            MakeYear = 2022,
                            Model = "C4",
                            NavigationSystem = false,
                            RegNumber = "B1223AB",
                            Seats = 5,
                            Transmission = 1
                        });
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Economy"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Compact"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Intermediate"
                        });
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDealer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d3211a8d-efde-4a19-8087-79cde4679276",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e287474d-6bed-4d6c-af60-d82d404c90ae",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Peter",
                            IsDealer = true,
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKwUu564xPOrdPLEkD2ntUEhyUxQ66acwAAnngO6Rfi7EK7b8gngET+1GgbxSNW4wQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6abeb0b-09e5-4652-ab79-980eafc5e422",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "c6e570fd-d889-4a67-a36a-0ecbe758bc2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "723338dd-553e-4133-9028-a18267ad95b5",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Peter",
                            IsDealer = false,
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAENstEE4obZNpL1TbsqmqKTsAYrjiLdHFDqWvXdx22QlbuQqUD92RqPZ21mmQ/fokyA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9523f731-641c-4403-aeaf-d8bf500e2d62",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        });
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Insurance", b =>
                {
                    b.Property<int>("InsuranceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuranceCode"));

                    b.Property<decimal>("CostPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TypeOfInsurance")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InsuranceCode");

                    b.ToTable("Insurances");

                    b.HasData(
                        new
                        {
                            InsuranceCode = 1,
                            CostPerDay = 10m,
                            TypeOfInsurance = "FullCoverage"
                        },
                        new
                        {
                            InsuranceCode = 2,
                            CostPerDay = 5m,
                            TypeOfInsurance = "HalfCoverage"
                        });
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bulgaria, Varna, 9000",
                            LocationName = "Varna Center"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Bulgaria, Varna, 9000",
                            LocationName = "Varna Airport"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Bulgaria, Sofia, 1000",
                            LocationName = "Sofia Airport"
                        });
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DropOffDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DropOffLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickUpDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PickUpLocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CarId");

                    b.HasIndex("DropOffLocationId");

                    b.HasIndex("InsuranceCode");

                    b.HasIndex("PickUpLocationId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "d3211a8d-efde-4a19-8087-79cde4679276",
                            CarId = 3,
                            DropOffDateAndTime = new DateTime(2022, 11, 23, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            DropOffLocationId = 1,
                            Duration = 6,
                            InsuranceCode = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = false,
                            PaymentType = 1,
                            PickUpDateAndTime = new DateTime(2022, 11, 17, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            PickUpLocationId = 1,
                            TotalAmount = 292m
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "d3211a8d-efde-4a19-8087-79cde4679276",
                            CarId = 2,
                            DropOffDateAndTime = new DateTime(2022, 11, 20, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            DropOffLocationId = 2,
                            Duration = 3,
                            InsuranceCode = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsPaid = false,
                            PaymentType = 2,
                            PickUpDateAndTime = new DateTime(2022, 11, 17, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            PickUpLocationId = 1,
                            TotalAmount = 114m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Car", b =>
                {
                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Cars")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Order", b =>
                {
                    b.HasOne("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Location", "DropOffLocation")
                        .WithMany("DropOffLocations")
                        .HasForeignKey("DropOffLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Insurance", "Insurance")
                        .WithMany("Orders")
                        .HasForeignKey("InsuranceCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentACar.Infrastructure.Entitites.Location", "PickUpLocation")
                        .WithMany("PickUpLocations")
                        .HasForeignKey("PickUpLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Car");

                    b.Navigation("DropOffLocation");

                    b.Navigation("Insurance");

                    b.Navigation("PickUpLocation");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Car", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Insurance", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RentACar.Infrastructure.Entitites.Location", b =>
                {
                    b.Navigation("DropOffLocations");

                    b.Navigation("PickUpLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
